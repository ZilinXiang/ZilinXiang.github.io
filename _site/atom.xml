<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-11-10T14:20:38+08:00</updated><id>http://localhost:4000/atom.xml</id><title type="html">Zilin Xiang | Blog</title><author><name>Zilin Xiang</name></author><entry><title type="html">Python的函数参数传递问题</title><link href="http://localhost:4000/note/2019/11/10/Python%E7%9A%84%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E9%97%AE%E9%A2%98/" rel="alternate" type="text/html" title="Python的函数参数传递问题" /><published>2019-11-10T05:20:48+08:00</published><updated>2019-11-10T05:20:48+08:00</updated><id>http://localhost:4000/note/2019/11/10/Python%E7%9A%84%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E9%97%AE%E9%A2%98</id><content type="html" xml:base="http://localhost:4000/note/2019/11/10/Python%E7%9A%84%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E9%97%AE%E9%A2%98/">&lt;blockquote&gt;
  &lt;p&gt;Python是解释执行的脚本语言，所以他与C语言等都不是一个体系， 存在诸多不一样的地方。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Python 我认为与 C/C++ 最不一样的地方就是：没有变量类型。 而这个特点恰恰会带来一个很严重的问题，就是针对函数参数的传递。习惯了C/C++， 对于传参简直就是张口就来： 传值、传地址、引用。但是Python函数参数的传递和这些都不一样，因为Python的变量都是和对象进行绑定的，为此只要对象发生改变，变量的值就不会被函数改变。请看下面的例子，&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def f(a):
	a = a + 1
b = 2
f(b)
print(b)
###  &amp;gt;  2 （因为运算导致新对象的创建，导致a不再和b绑定同一个对象，为此b的值不变）

def f(a):
	a[0] += 1
b = [1, 2]
f(b)
print(b)
### &amp;gt; [2, 2] (因为与b绑定的是一个list对象，list对象是可变对象，函数并未导致a, b绑定不同的对象，为此b的值发生改变)

def f(a):
	a = [1, 2]
	a[0] += 1
b = [1, 2]
f(b)
print(b)
### &amp;gt; [1, 2] (因为a与一个新的对象进行绑定，函数导致a, b绑定不同的对象，为此b的值不发生改变)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Zilin Xiang</name></author><category term="Python" /><summary type="html">Python是解释执行的脚本语言，所以他与C语言等都不是一个体系， 存在诸多不一样的地方。</summary></entry><entry><title type="html">服务器配置</title><link href="http://localhost:4000/tutorial/2019/11/10/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/" rel="alternate" type="text/html" title="服务器配置" /><published>2019-11-10T04:13:30+08:00</published><updated>2019-11-10T04:13:30+08:00</updated><id>http://localhost:4000/tutorial/2019/11/10/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE</id><content type="html" xml:base="http://localhost:4000/tutorial/2019/11/10/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/">&lt;blockquote&gt;
  &lt;p&gt;前段时间实验室添置了两台服务器，但是我们从来没接触过，所以完全是硬着头皮在搞，算是踩坑实践。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;用户及用户组管理&quot;&gt;用户及用户组管理&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;新建用户 （这里有个坑）
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;adduser&lt;/code&gt;: 会以交互的方式进行创建用户，自动创建主目录等，适合新手&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;useradd&lt;/code&gt;: 拥有诸多参数选项（若不指定任何参数，所创建的用户没有主目录、shell，因为未指定密码也无法登录系统），适合进阶者使用&lt;/li&gt;
      &lt;li&gt;利用&lt;code class=&quot;highlighter-rouge&quot;&gt;shell&lt;/code&gt;脚本进行批次新建:  &lt;code class=&quot;highlighter-rouge&quot;&gt;useradd guest001 -m -p 123456 -r -s \bin\bash -g cola&lt;/code&gt; （指定密码&lt;code class=&quot;highlighter-rouge&quot;&gt;123456&lt;/code&gt;，用户组&lt;code class=&quot;highlighter-rouge&quot;&gt;cola&lt;/code&gt;，指定&lt;code class=&quot;highlighter-rouge&quot;&gt;shell&lt;/code&gt;）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;删除用户： &lt;code class=&quot;highlighter-rouge&quot;&gt;userdel guest001&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;新建用户组：&lt;code class=&quot;highlighter-rouge&quot;&gt;addgroup cola&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;删除用户组：&lt;code class=&quot;highlighter-rouge&quot;&gt;groupdel&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;修改用户、用户组信息：&lt;code class=&quot;highlighter-rouge&quot;&gt;usermod&lt;/code&gt; \ &lt;code class=&quot;highlighter-rouge&quot;&gt;groupmod&lt;/code&gt;（指定具体参数进行修改）&lt;/li&gt;
  &lt;li&gt;显示用户、用户组信息： &lt;code class=&quot;highlighter-rouge&quot;&gt;cat /etc/passwd&lt;/code&gt; \ &lt;code class=&quot;highlighter-rouge&quot;&gt;cat /etc/group&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;添加用户到&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt;组：&lt;code class=&quot;highlighter-rouge&quot;&gt;usermod -G sudo guest001&lt;/code&gt; （指定附加群组）&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;ssh远程登录&quot;&gt;SSH远程登录&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;在服务器安装ssh: &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt install openssh-server&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;SSH配置： 修改配置文件&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh/sshd_config&lt;/code&gt; （修改端口，登录限制等等）&lt;/li&gt;
  &lt;li&gt;开启SSH服务： &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo /etc/init.d/ssh start&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;网络配置&quot;&gt;网络配置&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;可配置类型：动态IP， 静态IP
    &lt;ul&gt;
      &lt;li&gt;配置文件位于&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/network/interfaces&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;动态IP（DHCP），当所分配的固定IP与设备MAC地址绑定时也需使用动态IP,
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; auto eno1 #eno1为网卡
 iface eno1 inet dhcp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;静态IP（一般为局域网IP，也可设置公网IP），必须设置网关
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; auto eno1
iface eno1 inet static
address 192.168.3.90
gateway 192.168.3.1
netmask 255.255.255.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;配置结束后，需重启网络服务： &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo /etc/init.d/networking restart&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;当服务器所分配的固定IP与MAC地址绑定时，最好是通过网口直连；若服务器与路由器相连，路由器在中间作为代理，IP提供者便无法检测到对应MAC地址，为此需将服务器MAC地址克隆到路由器，并建立虚拟服务器（使得外网对该IP的访问会映射到服务器）&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Zilin Xiang</name></author><category term="Server" /><category term="Linux" /><summary type="html">前段时间实验室添置了两台服务器，但是我们从来没接触过，所以完全是硬着头皮在搞，算是踩坑实践。</summary></entry></feed>